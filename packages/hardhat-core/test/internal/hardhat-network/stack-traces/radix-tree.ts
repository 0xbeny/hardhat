import { assert } from "chai";
import {
  RadixNode,
  RadixTree,
} from "../../../../src/internal/hardhat-network/stack-traces/radix-tree";

describe("RadixTree", function () {
  describe("Construction", function () {
    it("Should create an empty RadixTree successfully", function () {
      const tree = new RadixTree();
      assert.deepEqual(tree.root, new RadixNode("", false, 0));
    });

    it("Should create a tree with a single word successfully", function () {
      const tree = new RadixTree();
      tree.add("test");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("test", true, 0));
      assert.deepEqual(tree.root, expectedRoot);
    });

    it("Should create the same tree if a single word is added twice", function () {
      const tree = new RadixTree();
      tree.add("test");
      tree.add("test");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("test", true, 0));
      assert.deepEqual(tree.root, expectedRoot);
    });

    it("Should support adding a words that are extensions of an existing ones", function () {
      const tree = new RadixTree();
      tree.add("test");
      tree.add("test2");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("test", true, 0));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("2", new RadixNode("2", true, 4));

      assert.deepEqual(tree.root, expectedRoot);

      tree.add("test3");

      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("3", new RadixNode("3", true, 4));

      assert.deepEqual(tree.root, expectedRoot);

      tree.add("test23456");

      expectedRoot.childNodes
        .get("t")!
        .childNodes.get("2")!
        .childNodes.set("3", new RadixNode("3456", true, 5));

      assert.deepEqual(tree.root, expectedRoot);
    });

    it("Should support adding words that are prefixes of existing ones", function () {
      const tree = new RadixTree();
      tree.add("test");
      tree.add("te");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("te", true, 0));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("s", new RadixNode("st", true, 2));

      assert.deepEqual(tree.root, expectedRoot);
    });

    it("Should support adding with a shared prefix but not equal nor included in existing ones", function () {
      const tree = new RadixTree();
      tree.add("test");
      tree.add("tast");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("t", false, 0));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("e", new RadixNode("est", true, 1));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("a", new RadixNode("ast", true, 1));

      assert.deepEqual(tree.root, expectedRoot);
    });

    it("Should support adding words that match with existing nodes", function () {
      const tree = new RadixTree();
      tree.add("test");
      tree.add("tast");
      tree.add("t");

      const expectedRoot = new RadixNode("", false, 0);
      expectedRoot.childNodes.set("t", new RadixNode("t", true, 0));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("e", new RadixNode("est", true, 1));
      expectedRoot.childNodes
        .get("t")!
        .childNodes.set("a", new RadixNode("ast", true, 1));

      assert.deepEqual(tree.root, expectedRoot);
    });
  });

  describe("getMaxMatch", function () {
    describe("With default firstNode", function () {
      it("Should work on an empty tree", function () {
        const tree = new RadixTree();

        assert.deepEqual(tree.getMaxMatch("word"), [false, 0, tree.root]);
      });

      it("Should work with words without prefix", function () {
        const tree = new RadixTree();
        tree.add("asd");

        assert.deepEqual(tree.getMaxMatch("word"), [false, 0, tree.root]);
      });

      it("Should work with words with prefix smaller than a label", function () {
        const tree = new RadixTree();
        tree.add("asd");

        assert.deepEqual(tree.getMaxMatch("as"), [
          false,
          2,
          tree.root.childNodes.get("a")!,
        ]);
      });

      it("Should work with words that are present after a few nodes", function () {
        const tree = new RadixTree();
        tree.add("a");
        tree.add("as");
        tree.add("asd");

        tree.dump();

        assert.deepEqual(tree.getMaxMatch("asd"), [
          true,
          3,
          tree.root.childNodes
            .get("a")!
            .childNodes.get("s")!
            .childNodes.get("d")!,
        ]);
      });

      it("Should work with words longer than the existing ones", function () {
        const tree = new RadixTree();
        tree.add("a");
        tree.add("as");
        tree.add("asd");

        assert.deepEqual(tree.getMaxMatch("asde"), [
          false,
          3,
          tree.root.childNodes
            .get("a")!
            .childNodes.get("s")!
            .childNodes.get("d")!,
        ]);
      });
    });

    describe("Real-world examples", function () {
      it("Should find the first bytecodes from a test", function () {
        // Bytecodes extracted from
        // Use compiler soljson-v0.6.3+commit.8dda9521.js
        //          0_6
        //            abi-v2
        //              call-failing-function
        //                Without optimizations
        //                  test-files/0_6/abi-v2/call-failing-function
        const tree = new RadixTree();
        const bytecode0 =
          "608060405234801561001057600080fd5b506105d5806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8a8fd6d14610030575b600080fd5b61003861003a565b005b6000604051610048906100f0565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a9cc47186040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100af57600080fd5b505af11580156100c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506100ec91908101906101e1565b5050565b6103078061029983390190565b600082601f83011261010e57600080fd5b815161012161011c8261024f565b610222565b9150818183526020840193506020810190508385604084028201111561014657600080fd5b60005b83811015610176578161015c8882610180565b845260208401935060408301925050600181019050610149565b5050505092915050565b60006040828403121561019257600080fd5b61019c6040610222565b905060006101ac848285016101cc565b60008301525060206101c0848285016101cc565b60208301525092915050565b6000815190506101db81610281565b92915050565b6000602082840312156101f357600080fd5b600082015167ffffffffffffffff81111561020d57600080fd5b610219848285016100fd565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561024557600080fd5b8060405250919050565b600067ffffffffffffffff82111561026657600080fd5b602082029050602081019050919050565b6000819050919050565b61028a81610277565b811461029557600080fd5b5056fe608060405234801561001057600080fd5b506102e7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9cc471814610030575b600080fd5b61003861004e565b604051610045919061021b565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100829061023d565b60405180910390fd5b61009361010d565b81526020019060019003908161008b5790505090506040518060400160405280600181526020016002815250816000815181106100cc57fe5b60200260200101819052506040518060400160405280600281526020016003815250816001815181106100fb57fe5b60200260200101819052508091505090565b604051806040016040528060008152602001600081525090565b600061013383836101dd565b60408301905092915050565b600061014a8261026d565b6101548185610285565b935061015f8361025d565b8060005b838110156101905781516101778882610127565b975061018283610278565b925050600181019050610163565b5085935050505092915050565b60006101aa600883610296565b91507f44206661696c65640000000000000000000000000000000000000000000000006000830152602082019050919050565b6040820160008201516101f3600085018261020c565b506020820151610206602085018261020c565b50505050565b610215816102a7565b82525050565b60006020820190508181036000830152610235818461013f565b905092915050565b600060208201905081810360008301526102568161019d565b9050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905091905056fea2646970667358221220fbf4de57de6e06c6bac2a7ec2392518b6eb777da534fdd38b8bd290988583c6764736f6c63430006030033a264697066735822122070cadf9cc927971990ad70f87b31a21294cb7ba5f9498d6595ebde6fab6c9a9b64736f6c63430006030033";
        const bytecode1 =
          "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8a8fd6d14610030575b600080fd5b61003861003a565b005b6000604051610048906100f0565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663a9cc47186040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100af57600080fd5b505af11580156100c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506100ec91908101906101e1565b5050565b6103078061029983390190565b600082601f83011261010e57600080fd5b815161012161011c8261024f565b610222565b9150818183526020840193506020810190508385604084028201111561014657600080fd5b60005b83811015610176578161015c8882610180565b845260208401935060408301925050600181019050610149565b5050505092915050565b60006040828403121561019257600080fd5b61019c6040610222565b905060006101ac848285016101cc565b60008301525060206101c0848285016101cc565b60208301525092915050565b6000815190506101db81610281565b92915050565b6000602082840312156101f357600080fd5b600082015167ffffffffffffffff81111561020d57600080fd5b610219848285016100fd565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561024557600080fd5b8060405250919050565b600067ffffffffffffffff82111561026657600080fd5b602082029050602081019050919050565b6000819050919050565b61028a81610277565b811461029557600080fd5b5056fe608060405234801561001057600080fd5b506102e7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9cc471814610030575b600080fd5b61003861004e565b604051610045919061021b565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100829061023d565b60405180910390fd5b61009361010d565b81526020019060019003908161008b5790505090506040518060400160405280600181526020016002815250816000815181106100cc57fe5b60200260200101819052506040518060400160405280600281526020016003815250816001815181106100fb57fe5b60200260200101819052508091505090565b604051806040016040528060008152602001600081525090565b600061013383836101dd565b60408301905092915050565b600061014a8261026d565b6101548185610285565b935061015f8361025d565b8060005b838110156101905781516101778882610127565b975061018283610278565b925050600181019050610163565b5085935050505092915050565b60006101aa600883610296565b91507f44206661696c65640000000000000000000000000000000000000000000000006000830152602082019050919050565b6040820160008201516101f3600085018261020c565b506020820151610206602085018261020c565b50505050565b610215816102a7565b82525050565b60006020820190508181036000830152610235818461013f565b905092915050565b600060208201905081810360008301526102568161019d565b9050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905091905056fea2646970667358221220fbf4de57de6e06c6bac2a7ec2392518b6eb777da534fdd38b8bd290988583c6764736f6c63430006030033a264697066735822122070cadf9cc927971990ad70f87b31a21294cb7ba5f9498d6595ebde6fab6c9a9b64736f6c63430006030033";
        const bytecode2 =
          "608060405234801561001057600080fd5b506102e7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9cc471814610030575b600080fd5b61003861004e565b604051610045919061021b565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100829061023d565b60405180910390fd5b61009361010d565b81526020019060019003908161008b5790505090506040518060400160405280600181526020016002815250816000815181106100cc57fe5b60200260200101819052506040518060400160405280600281526020016003815250816001815181106100fb57fe5b60200260200101819052508091505090565b604051806040016040528060008152602001600081525090565b600061013383836101dd565b60408301905092915050565b600061014a8261026d565b6101548185610285565b935061015f8361025d565b8060005b838110156101905781516101778882610127565b975061018283610278565b925050600181019050610163565b5085935050505092915050565b60006101aa600883610296565b91507f44206661696c65640000000000000000000000000000000000000000000000006000830152602082019050919050565b6040820160008201516101f3600085018261020c565b506020820151610206602085018261020c565b50505050565b610215816102a7565b82525050565b60006020820190508181036000830152610235818461013f565b905092915050565b600060208201905081810360008301526102568161019d565b9050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905091905056fea2646970667358221220fbf4de57de6e06c6bac2a7ec2392518b6eb777da534fdd38b8bd290988583c6764736f6c63430006030033";
        const bytecode3 =
          "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9cc471814610030575b600080fd5b61003861004e565b604051610045919061021b565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100829061023d565b60405180910390fd5b61009361010d565b81526020019060019003908161008b5790505090506040518060400160405280600181526020016002815250816000815181106100cc57fe5b60200260200101819052506040518060400160405280600281526020016003815250816001815181106100fb57fe5b60200260200101819052508091505090565b604051806040016040528060008152602001600081525090565b600061013383836101dd565b60408301905092915050565b600061014a8261026d565b6101548185610285565b935061015f8361025d565b8060005b838110156101905781516101778882610127565b975061018283610278565b925050600181019050610163565b5085935050505092915050565b60006101aa600883610296565b91507f44206661696c65640000000000000000000000000000000000000000000000006000830152602082019050919050565b6040820160008201516101f3600085018261020c565b506020820151610206602085018261020c565b50505050565b610215816102a7565b82525050565b60006020820190508181036000830152610235818461013f565b905092915050565b600060208201905081810360008301526102568161019d565b9050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905091905056fea2646970667358221220fbf4de57de6e06c6bac2a7ec2392518b6eb777da534fdd38b8bd290988583c6764736f6c63430006030033";

        tree.add(bytecode0);
        tree.add(bytecode1);
        tree.add(bytecode2);
        tree.add(bytecode3);

        assert.isTrue(tree.getMaxMatch(bytecode0)[0]);
        assert.isTrue(tree.getMaxMatch(bytecode1)[0]);
        assert.isTrue(tree.getMaxMatch(bytecode2)[0]);
        assert.isTrue(tree.getMaxMatch(bytecode3)[0]);
      });
    });
  });

  describe("getDescendantSuffixes", function () {
    it("Should be empty for an empty tree", function () {
      const tree = new RadixTree();
      assert.deepEqual(Array.from(tree.getDescendantSuffixes(tree.root)), []);
    });

    it("Should return the node's label first, if present", function () {
      const tree = new RadixTree();
      tree.add("test");

      const node = tree.root.childNodes.get("t")!;
      const [first] = tree.getDescendantSuffixes(node);
      assert.equal(first, "test");
    });

    it("Should return the following suffixes", function () {
      //       <root>
      //         |
      //       <asd>
      //      /    \
      //   [1a]   <a>
      //    |     /  \
      //   [2]  [a]  [c]

      const tree = new RadixTree();
      tree.add("asd1a");
      tree.add("asd1a2");
      tree.add("asdaa");
      tree.add("asdac");

      const asdNode = tree.root.childNodes.get("a")!;
      assert.deepEqual(Array.from(tree.getDescendantSuffixes(asdNode)), [
        "asd1a",
        "asd1a2",
        "asdaa",
        "asdac",
      ]);

      const oneNode = asdNode.childNodes.get("1")!;
      assert.deepEqual(Array.from(tree.getDescendantSuffixes(oneNode)), [
        "1a",
        "1a2",
      ]);

      const aNode = asdNode.childNodes.get("a")!;
      assert.deepEqual(Array.from(tree.getDescendantSuffixes(aNode)), [
        "aa",
        "ac",
      ]);

      const cNode = aNode.childNodes.get("c")!;
      assert.deepEqual(Array.from(tree.getDescendantSuffixes(cNode)), ["c"]);
    });
  });
});
